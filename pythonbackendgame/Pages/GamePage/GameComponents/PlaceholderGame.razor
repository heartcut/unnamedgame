
@if (whichplayersgame == playeriam)
{
    <h2 id="game-title">INITIALIZING NEXT MINIGAME</h2>
    <br />
}
else
{
    <h2 id="game-title" style="opacity:0%;">Find all the nines</h2>
    <br />
}
@code {
    [Parameter] public EventCallback<MainDataModel> mainDataModelChanged { get; set; }
    [Parameter] public EventCallback<LeechSendModel> leechsmChanged { get; set; }
    [Parameter]
    public int answer1 { get; set; }
    [Parameter]
    public int answer2 { get; set; }
    [Parameter]
    public MainDataModel mainDataModel { get; set; }
    [Parameter]
    public LeechSendModel leechsm { get; set; }
    [Parameter]
    public int playeriam { get; set; }
    [Parameter]
    public int whichplayersgame { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"[OnParametersSet] Player {playeriam} - before: p1game={mainDataModel.P1Game}");
        await Task.Delay(2000);
        if(whichplayersgame==playeriam)
        {
            if (playeriam == 1) { MinigameGeneration.StartNewGameHost(mainDataModel); mainDataModel.P1State = 1; }

            if (leechsm != null)
            {
                if (playeriam == 2 || playeriam == 3 || playeriam == 4) { MinigameGeneration.StartNewGameLeech(leechsm); leechsm.MyState = 1; switch (playeriam) { case 2: mainDataModel.P2State = 1; break; case 3: mainDataModel.P3State = 1; break; case 4: mainDataModel.P4State = 1; break; } }
            }
            
        }
        Console.WriteLine($"[OnParametersSet] Player {playeriam} - After: p1game={mainDataModel.P1Game}");
    }
    public async Task Go()
    {
        if (playeriam == 1) { MinigameGeneration.StartNewGameHost(mainDataModel); mainDataModel.P1State = 1; }

        if (leechsm!=null)
        { 
            if (playeriam == 2 || playeriam == 3 || playeriam == 4) { MinigameGeneration.StartNewGameLeech(leechsm); leechsm.MyState = 1; switch (playeriam) { case 2: mainDataModel.P2State = 1; break; case 3: mainDataModel.P3State = 1; break; case 4: mainDataModel.P4State = 1; break; } }
        }
        await Task.Delay(1000);
    }
   
}