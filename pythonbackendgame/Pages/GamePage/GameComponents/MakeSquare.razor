

@if (playernumber == playeriam)
{
    <h2 id="game-title">Create a square.</h2>
    <br />
}
else
{
    <h2 id="game-title" style="opacity:0%;">Find all the nines</h2>
    <br />
}

<div>
    <div class="arrow-up" style="transform: rotate(@GetVars(1)); transition: transform .5s;"></div>
    <div class="arrow-down" style="transform: rotate(@GetVars(2)); transition: transform .5s;"></div>
    <div class="arrow-left" style="transform: rotate(@GetVars(3)); transition: transform .5s;"></div>
    <div class="arrow-right" style="transform: rotate(@GetVars(4)); transition: transform .5s;"></div>
    <div style="position:absolute; z-index:10;width:150px;height:150px;left: 225px;
    top: 75px; transform:rotate(45deg);display: grid;
        grid-template-columns: 1fr 1fr;
        grid-template-rows: 1fr 1fr;">
    
        <div class="quadrant" @onclick="()=>SquareRotate(2)" style="opacity:0%;"></div>
        <div class="quadrant" @onclick="()=>SquareRotate(3)" style="opacity:0%;"></div>
        <div class="quadrant" @onclick="()=>SquareRotate(4)" style="opacity:0%;"></div>
        <div class="quadrant" @onclick="()=>SquareRotate(1)" style="opacity:0%;"></div>
    
    </div>
</div>

<style>
    .quadrant {
        width: 100%;
        height: 100%;
        background-color: orange;
        display: flex;
        justify-content: center;
        align-items: center;
    }
    </style>
@code {
    [Parameter] public EventCallback<MainDataModel> mainDataModelChanged { get; set; }
    [Parameter] public EventCallback<LeechSendModel> lsmChanged { get; set; }
    [Parameter]
    public LeechSendModel lsm { get; set; }
    [Parameter]
    public MainDataModel mainDataModel { get; set; }
    [Parameter]
    public int Var1 { get; set; }
    [Parameter]
    public int Var2 { get; set; }
    [Parameter]
    public int Var3 { get; set; }
    [Parameter]
    public int Var4 { get; set; }
    [Parameter]
    public int playernumber { get; set; }
    [Parameter]
    public int playeriam { get; set; }

    public string done = "not yet";
    protected override void OnInitialized()
    {
        done = "not yet";
    }
    public string GetVars(int which)
    {
        switch (which)
        {
            case 1: return (Var1 * 90).ToString() + "deg";
            case 2: return (Var2 * 90).ToString() + "deg";
            case 3: return (Var3 * 90).ToString() + "deg";
            case 4: return (Var4 * 90).ToString() + "deg";
        }
        return "1";
    }
    public async Task SquareRotate(int a)
    {
        switch (a)
        {
            case 1:
                if (playeriam == 1) { mainDataModel.P1GameVar1++; }
                else { lsm.GameVar1++; }
                Var1++;
                break;
            case 2:
                if (playeriam == 1) { mainDataModel.P1GameVar2++; }
                else { lsm.GameVar2++; }
                Var2++;
                break;
            case 3:
                if (playeriam == 1) { mainDataModel.P1GameVar3++; }
                else { lsm.GameVar3++; }
                Var3++;
                break;
            case 4:
                if (playeriam == 1) { mainDataModel.P1GameVar4++; }
                else { lsm.GameVar4++; }
                Var4++;
                break;
        }
        if (Var1 % 4 == 0 && Var2 % 4 == 0 && Var3 % 4 == 0 && Var4 % 4 == 0)
        {
            done = "okay ur done kid.";
            //you finished the game
            await Task.Delay(1000);
            mainDataModel.FinishedGame(true, playeriam, mainDataModel, lsm);
            //StateHasChanged();
        }
        //StateHasChanged();
    }
}
