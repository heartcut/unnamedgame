@implements IDisposable
<h2 id="game-title">Drag the circle to the end of the maze</h2>
<br />
@if (gamestate == 1)
{
    <div id="@whichplayerwindow" @onmousemove="OnMouseMove" style="top:-25px;position: relative; width:545px; height:225px;">

        <draggable-circle @onclick="CircleClicked" style="position: absolute; left:@circleX; top:@circleY; z-index:3; box-shadow: 0 0 10px 3px grey;"></draggable-circle>
        <div style="position: absolute; width:3px; height:185px; left:15px; top:28px;z-index:3; background-color:@wallcolor;box-shadow: 0 0 10px 3px @wallcolor;"></div>
        <div style="position: absolute; width:3px; height:15px; left:60px; top:28px;z-index:3; background-color:@wallcolor; box-shadow: 0 0 10px 3px @wallcolor;"></div>
        <div style="position: absolute; width:465px; height:3px; left:60px; top:42px;z-index:3; background-color:@wallcolor;box-shadow: 0 0 10px 3px @wallcolor;"></div>
        <div style="position: absolute; width:3px; height:170px; left:525px; top:42px;z-index:3; background-color:@wallcolor;box-shadow: 0 0 10px 3px @wallcolor;"></div>
        <div style="position: absolute; width:450px; height:3px; left:15px; top:212px;z-index:3; background-color:@wallcolor;box-shadow: 0 0 10px 3px @wallcolor;"></div>
        <div style="position: absolute; width:3px; height:120px; left:350px; top:42px;z-index:3; background-color:@wallcolor;box-shadow: 0 0 10px 3px @wallcolor;"></div>
        <div style="position: absolute; width:3px; height:120px; left:250px; top:42px;z-index:3; background-color:@wallcolor;box-shadow: 0 0 10px 3px @wallcolor;"></div>
        <div style="position: absolute; width:3px; height:120px; left:150px; top:42px;z-index:3; background-color:@wallcolor;box-shadow: 0 0 10px 3px @wallcolor;"></div>
        <div style="position: absolute; width:3px; height:120px; left:60px; top:42px;z-index:3; background-color:@wallcolor;box-shadow: 0 0 10px 3px @wallcolor;"></div>
        <div style="position: absolute; width:3px; height:120px; left:105px; top:95px;z-index:3; background-color:@wallcolor;box-shadow: 0 0 10px 3px @wallcolor;"></div>
        <div style="position: absolute; width:3px; height:120px; left:200px; top:95px;z-index:3; background-color:@wallcolor;box-shadow: 0 0 10px 3px @wallcolor;"></div>
        <div style="position: absolute; width:3px; height:120px; left:300px; top:95px;z-index:3; background-color:@wallcolor;box-shadow: 0 0 10px 3px @wallcolor;"></div>
        <div style="position: absolute; width:3px; height:120px; left:400px; top:95px;z-index:3; background-color:@wallcolor;box-shadow: 0 0 10px 3px @wallcolor;"></div>
        <div style="position: absolute; width:50px; height:50px; left:460px; top:150px;z-index:3; background-color:@finishcolor;box-shadow: 0 0 20px 10px green;"></div>
        <!-- You can position elements here using the mouse coordinates -->
    </div>
}
@if (gamestate == 2)
{
    <div>Correct!</div>
}
@if (gamestate == 3)
{
    <div>Wrong!</div>
}


@code {
    [Parameter] public EventCallback<MainDataModel> mainDataModelChanged { get; set; }
    [Parameter] public EventCallback<LeechSendModel> lsmChanged { get; set; }
    [Parameter]
    public LeechSendModel lsm { get; set; }
    [Parameter]
    public MainDataModel mainDataModel { get; set; }
    [Parameter]
    public int Var1 { get; set; }
    [Parameter]
    public int Var2 { get; set; }
    [Parameter]
    public int Var3 { get; set; }
    [Parameter]
    public int Var4 { get; set; }
    [Parameter]
    public int playernumber { get; set; }
    [Parameter]
    public int playeriam { get; set; }

    [Inject]
    protected BrowserService Service { get; set; }
    private double mouseX;
    private double mouseY;
    private string circleX = "28px";
    private string circleY = "40px";
    private int Xoffset=12;
    private int Yoffset=12;

    bool dragging = false;
    bool collided = false;
    string wallcolor = "orange";
    string finishcolor = "grey";

    PeriodicTimer periodicTimer = new(TimeSpan.FromMinutes(.006));

    bool mywindow = false;

    public int gamestate = 0;
    public string whichplayerwindow = "";
    protected override void OnInitialized()
    {

        whichplayerwindow = playernumber + "window"; 
        if (playernumber == playeriam)
        {
            mywindow = true;
        }
        GameTimer(); 
        gamestate = 1;
    }
    async void GameTimer()
    {
        while (await periodicTimer.WaitForNextTickAsync())
        {
            if(collided)
            {
            }
            if (gamestate!=1){ Dispose(); }
            if (!mywindow)
            {
                switch (playernumber)
                {
                    case 1: circleX = mainDataModel.P1GameVar1.ToString() + "px"; circleY = mainDataModel.P1GameVar2.ToString() + "px"; break;
                    case 2: circleX = mainDataModel.P2GameVar1.ToString() + "px"; circleY = mainDataModel.P2GameVar2.ToString() + "px"; break;
                    case 3: circleX = mainDataModel.P3GameVar1.ToString() + "px"; circleY = mainDataModel.P3GameVar2.ToString() + "px"; break;
                    case 4: circleX = mainDataModel.P4GameVar1.ToString() + "px"; circleY = mainDataModel.P4GameVar2.ToString() + "px"; break;
                }
                //StateHasChanged();
            }

        }
    }
    public async Task CircleClicked()
    {
        dragging = !dragging;
    }


    // This method is triggered whenever the mouse moves inside the container
    private async Task OnMouseMove(MouseEventArgs e)
    {
        if (gamestate!=1)
        {
            dragging = false;
            return;
        }
        if (!mywindow)
        {
            return;
        }
        if (!dragging)
        {
            return;
        }
        var elementRect = await Service.GetElementRect(playernumber + "window");

        double var1 = e.ClientX - elementRect.Left; // Mouse X relative to myContainer
        double var2 = e.ClientY - elementRect.Top;  // Mouse Y relative to myContainer
        circleX = $"{(Convert.ToInt32(var1) - Xoffset)}px";
        circleY = $"{(Convert.ToInt32(var2) - Yoffset)}px";
        //StateHasChanged(); // Update the UI
        //this is where we check for collision
        int xint = Convert.ToInt32(var1) - Xoffset;
        int yint = Convert.ToInt32(var2) - Yoffset;
        //horizontaldivs hardcoded

        if ((xint < 19 && yint > 5) ||
            (xint > 37 && xint < 62 && !(yint > 150 && yint < 186)) ||
            (xint > 81 && xint < 108 && !(yint > 46 && yint < 86)) ||
            (xint > 125 && xint < 153 && !(yint > 150 && yint < 186)) ||
            (xint > 174 && xint < 205 && !(yint > 46 && yint < 86)) ||
            (xint > 225 && xint < 253 && !(yint > 150 && yint < 186)) ||
            (xint > 274 && xint < 305 && !(yint > 46 && yint < 86)) ||
            (xint > 325 && xint < 353 && !(yint > 150 && yint < 186)) ||
            (xint > 374 && xint < 405 && !(yint > 46 && yint < 86)))
        {
            if(!collided)
            {
                wallcolor = "red";
                Console.WriteLine("collidedx" + xint.ToString());
                Console.WriteLine("collidedy" + yint.ToString());
                collided = true;
                await Task.Delay(1000);
                gamestate = 3;
                await Task.Delay(1000);
                if (playeriam == 1) { mainDataModel.P1State = 0; }
                else { lsm.MyState = 0; switch (playeriam) { case 2: mainDataModel.P2State = 0; break; case 3: mainDataModel.P3State = 0; break; case 4: mainDataModel.P4State = 0; break; } }
            }
            
            
        }
        if(xint>445 && yint>137)
        {
            wallcolor = "green";
            finishcolor = "green";
            await Task.Delay(1000);
            gamestate = 2;
            await Task.Delay(1000);
            if (playeriam == 1) { mainDataModel.P1State = 0; }
            else { lsm.MyState = 0; switch (playeriam) { case 2: mainDataModel.P2State = 0; break; case 3: mainDataModel.P3State = 0; break; case 4: mainDataModel.P4State = 0; break; } }
        }
        if (playernumber == 1)
        {
            mainDataModel.P1GameVar1 = (Convert.ToInt32(var1) - Xoffset);
            mainDataModel.P1GameVar2 = (Convert.ToInt32(var2) - Yoffset);
        }
        else
        {
            lsm.GameVar1 = (Convert.ToInt32(var1) - Xoffset);
            lsm.GameVar2 = (Convert.ToInt32(var2) - Yoffset);
        }
        // Optionally call StateHasChanged() if needed (usually not required in event callbacks)
    }
    public void Dispose()
    {
        periodicTimer.Dispose();
    }
}
