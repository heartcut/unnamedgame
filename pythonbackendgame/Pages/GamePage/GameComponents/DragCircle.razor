@implements IDisposable
<h2 id="game-title">Drag the circle to the end of the maze</h2>
<br />
@if (gamestate == 1)
{
    <div id="@whichplayerwindow" @onmousemove="OnMouseMove" style="top:-25px;position: relative; width:545px; height:225px; border:1px solid yellow;">
        <draggable-circle style="position: absolute; left:@circleX; top:@circleY;z-index:3;"></draggable-circle>
        <!-- You can position elements here using the mouse coordinates -->
    </div>
}
@if (gamestate == 2)
{
    <div>Correct!</div>
}
@if (gamestate == 3)
{
    <div>Wrong!</div>
}


@code {
    [Parameter] public EventCallback<MainDataModel> mainDataModelChanged { get; set; }
    [Parameter] public EventCallback<LeechSendModel> lsmChanged { get; set; }
    [Parameter]
    public LeechSendModel lsm { get; set; }
    [Parameter]
    public MainDataModel mainDataModel { get; set; }
    [Parameter]
    public int Var1 { get; set; }
    [Parameter]
    public int Var2 { get; set; }
    [Parameter]
    public int Var3 { get; set; }
    [Parameter]
    public int Var4 { get; set; }
    [Parameter]
    public int playernumber { get; set; }
    [Parameter]
    public int playeriam { get; set; }

    [Inject]
    protected BrowserService Service { get; set; }
    private double mouseX;
    private double mouseY;
    private string circleX;
    private string circleY;

    public int gamestate = 0;
    public string whichplayerwindow = "";
    protected override void OnInitialized()
    {
        whichplayerwindow = playernumber + "window"; 
        gamestate = 1;
    }
    // This method is triggered whenever the mouse moves inside the container
    private async Task OnMouseMove(MouseEventArgs e)
    {
        var elementRect = await Service.GetElementRect("myContainer");

        double var1 = e.ClientX - elementRect.Left; // Mouse X relative to myContainer
        double var2 = e.ClientY - elementRect.Top;  // Mouse Y relative to myContainer
        circleX = $"{Convert.ToInt32(var1)}px";
        circleY = $"{Convert.ToInt32(var2)}px";
        //StateHasChanged(); // Update the UI

        // Optionally call StateHasChanged() if needed (usually not required in event callbacks)
    }
    public void Dispose()
    {
    }
}
