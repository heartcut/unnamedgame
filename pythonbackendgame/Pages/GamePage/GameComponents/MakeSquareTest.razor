@implements IDisposable

<h3>Rotate the triangles to form a square!</h3>

<div class="puzzle-container">
    @for (int i = 0; i < 4; i++)
    {
        <div class="triangle"
             style="transform: rotate(@rotations[i]deg);"
             @onclick="() => RotatePiece(i)">
        </div>
    }
</div>

@if (isSolved)
{
    <div class="success-message">You solved it!</div>
}

<style>
    .puzzle-container {
        display: grid;
        grid-template-columns: repeat(2, 100px);
        grid-template-rows: repeat(2, 100px);
        width: 200px;
        height: 200px;
        position: relative;
    }

    .triangle {
        width: 100px;
        height: 100px;
        background: orange;
        position: relative;
        transform-origin: center;
        transition: transform 0.3s ease-in-out;
        cursor: pointer;
    }

        /* Correctly clip and position the triangles */
        .triangle:nth-child(1) {
            clip-path: polygon(0% 0%, 100% 0%, 50% 50%);
        }

        .triangle:nth-child(2) {
            clip-path: polygon(100% 0%, 100% 100%, 50% 50%);
        }

        .triangle:nth-child(3) {
            clip-path: polygon(100% 100%, 0% 100%, 50% 50%);
        }

        .triangle:nth-child(4) {
            clip-path: polygon(0% 100%, 0% 0%, 50% 50%);
        }

    .success-message {
        margin-top: 20px;
        color: green;
        font-weight: bold;
    }
</style>

@code {
    private int[] rotations = new int[4];
    private bool isSolved = false;

    protected override void OnInitialized()
    {
        Random rand = new Random();
        for (int i = 0; i < 4; i++)
        {
            rotations[i] = rand.Next(0, 4) * 90; // Randomly rotate by 0, 90, 180, or 270 degrees
        }
    }

    private void RotatePiece(int index)
    {
        rotations[index] = (rotations[index] + 90) % 360;
        CheckIfSolved();
        StateHasChanged();
    }

    private void CheckIfSolved()
    {
        isSolved = rotations.All(rotation => rotation == 0);
    }

    public void Dispose()
    {
        // Cleanup if needed
    }
}

