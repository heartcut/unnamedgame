@implements IDisposable
<h4>Click the circle when the text names the color of the circle. @timer</h4>
@if (gamestate == 1)
{
    <div @onclick="CheckAnswer" style="@GetCircleColor()"></div>
    <div style=" font-weight:bolder; color:@colors[Var3];">@colors[Var2]</div>
}
@if (gamestate == 2)
{
    <div>Correct!</div>
}
@if (gamestate == 3)
{
    <div>Wrong!</div>
}
@code {
    [Parameter] public EventCallback<MainDataModel> mainDataModelChanged { get; set; }
    [Parameter] public EventCallback<LeechSendModel> lsmChanged { get; set; }
    /// <summary>
    /// Var1 is the color of the circle
    /// Var2 is what color the text SAYS
    /// Var3 is the color of the text
    /// </summary>
    [Parameter]
    public LeechSendModel lsm { get; set; }
    [Parameter]
    public MainDataModel mainDataModel { get; set; }
    [Parameter]
    public int Var1 { get; set; }
    [Parameter]
    public int Var2 { get; set; }
    [Parameter]
    public int Var3 { get; set; }
    [Parameter]
    public int Var4 { get; set; }
    [Parameter]
    public int playernumber { get; set; }
    [Parameter]
    public int playeriam { get; set; }

    public string[] colors = { "red", "green", "yellow", "blue" };

    PeriodicTimer periodicTimer = new(TimeSpan.FromMinutes(.016));

    public int gamestate = 0;
    int timer = 0;
    Random rndm = new Random();
    protected override void OnInitialized()
    {
        gamestate = 0;
        timer = 0;
        GameTimer();  // fire-and-forget
    }
    async void GameTimer()
    {
        while (await periodicTimer.WaitForNextTickAsync())
        {
            timer++;
            if (timer > 1 && gamestate != 1 && gamestate != 2 && gamestate != 3)
            {
                gamestate = 1;
            }
            if (timer >= 4 && timer % 2 == 0)
            {
                if (playeriam == playernumber)
                {

                    Var1 = rndm.Next(0, 4);
                    Var2 = rndm.Next(0, 4);
                    Var3 = rndm.Next(0, 4);
                    if (playeriam == 1) { mainDataModel.P1GameVar1 = Var1; mainDataModel.P1GameVar2 = Var2; mainDataModel.P1GameVar3 = Var3; }
                    else { lsm.GameVar1 = Var1; lsm.GameVar2 = Var2; lsm.GameVar3 = Var3; }

                }
            }
        }
    }
    public string GetCircleColor()
    {
        switch (Var1)
        {
            case 0: return "width:50px; height:50px;border-radius: 50%;  margin:auto; margin-bottom:20px; background:red;";
            case 1: return "width:50px; height:50px;border-radius: 50%;  margin:auto; margin-bottom:20px; background:green;";
            case 2: return "width:50px; height:50px;border-radius: 50%;  margin:auto; margin-bottom:20px; background:yellow;";
            case 3: return "width:50px; height:50px;border-radius: 50%;  margin:auto; margin-bottom:20px; background:blue;";
            default: return "width:50px; height:50px;border-radius: 50%;  margin:auto; margin-bottom:20px; background:grey;";
        }
    }
    public async Task CheckAnswer()
    {
        if (Var1 == Var2)
        {
            gamestate = 2;
            await Task.Delay(1000);
            mainDataModel.FinishedGame(true, playeriam, mainDataModel, lsm);
            //StateHasChanged();
        }
        else
        {
            gamestate = 3;
            await Task.Delay(1000);
            mainDataModel.FinishedGame(false, playeriam, mainDataModel, lsm);
            //StateHasChanged();
        }
    }
    public void Dispose()
    {
        periodicTimer.Dispose();
    }
}
