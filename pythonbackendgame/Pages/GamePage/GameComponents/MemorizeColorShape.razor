@implements IDisposable
<h2 id="game-title">Remember the colors and the shapes.</h2>
<br />
@if (gamestate == 0) //first screen with numbers and boxes
{
    <div class="flex flex-row flex-wrap h-100">
        <div class="flex flex-column flex-basis-50">
            <div style="@GetStyles(0, true)"></div>
        </div>
        <div class="flex flex-column flex-basis-50">
            <div style="@GetStyles(1, true)"></div>
        </div>
        <div class="flex flex-column flex-basis-50">
            <div style="@GetStyles(2, true)"></div>
        </div>
        <div class="flex flex-column flex-basis-50">
            <div style="@GetStyles(3, true)"></div>
        </div>
        @*<div class="flex flex-column flex-basis-50">
                <div style=" width: 0px; height: 0px; border-right: 30px solid transparent; border-top: 30px solid red; border-left: 30px solid red; border-bottom: 30px solid red; border-top-left-radius: 30px; border-top-right-radius: 30px; border-bottom-left-radius: 30px; border-bottom-right-radius: 30px;">pacman</div>
            </div>*@
    </div>
}
else if (gamestate == 1)
{
    <div>Remember</div>
}
else if (gamestate == 2) //screen with question and answer choices
{
    if (Var3 == 0)//question what color was the shape shown?
    {
        <p>What color was this shape?</p>
        <div style="@GetStyles(Var4, false) margin:auto;margin-bottom:20px;"></div>

        <button class="memorizeelementwords" @onclick="(() => CheckAnswer(1))">@colors[1]</button>
        <button class="memorizeelementwords"@onclick="(() => CheckAnswer(2))">@colors[2]</button>
        <button class="memorizeelementwords"@onclick="(() => CheckAnswer(3))">@colors[3]</button>
        <button class="memorizeelementwords"@onclick="(() => CheckAnswer(0))">@colors[0]</button>
    }
    else //question what shape was this color?
    {
        <p>What shape was the color @colors[Var4] </p>

        <div class="flex flex-row flex-wrap h-100">
            <div class="flex flex-column flex-basis-50">
                <div style="@GetStyles(1, false)" @onclick="(() => CheckAnswer(1))"></div>
            </div>
            <div class="flex flex-column flex-basis-50">
                <div style="@GetStyles(2, false)" @onclick="(() => CheckAnswer(2))"></div>
            </div>
            <div class="flex flex-column flex-basis-50">
                <div style="@GetStyles(3, false)" @onclick="(() => CheckAnswer(3))"></div>
            </div>
            <div class="flex flex-column flex-basis-50">
                <div style="@GetStyles(0, false)" @onclick="(() => CheckAnswer(0))"></div>
            </div>
        </div>
    }
}
else if (gamestate == 3)
{
    <div>Correct!</div>
}
else
{
    <div>Wrong!</div>
    //wrong
}

@code {
    [Parameter] public EventCallback<MainDataModel> mainDataModelChanged { get; set; }
    [Parameter] public EventCallback<LeechSendModel> lsmChanged { get; set; }
    [Parameter]
    public LeechSendModel lsm { get; set; }
    [Parameter]
    public MainDataModel mainDataModel { get; set; }
    //[colors,shapes,questoin1or2,answer]
    [Parameter]
    public int Var1 { get; set; }
    [Parameter]
    public int Var2 { get; set; }
    [Parameter]
    public int Var3 { get; set; }
    [Parameter]
    public int Var4 { get; set; }
    [Parameter]
    public int playernumber { get; set; }
    [Parameter]
    public int playeriam { get; set; }

    public string[] colors;
    public int[] shapes;
    //add color;
    public string[] shapestyles =
    {
        "width: 50px; height: 50px; background: ",
        "width: 50px; height: 50px; border-radius: 50%; background: ",
        "width: 0; height: 0;border-right: 50px solid transparent;border-top: 50px solid ",
        "width: 40px; height: 40px; border-radius: 50%; box-shadow: 10px 10px 0 0 ",
        "width: 75px; height: 50px; transform: skew(20deg); background: ",
        "border-left: 17px solid transparent; border-right: 17px solid transparent; height: 0; width: 50px; border-bottom: 50px solid "
    };

    PeriodicTimer periodicTimer = new(TimeSpan.FromMinutes(.016));

    public int gamestate = 0;
    int memorizetimer = 0;
    Random rndm = new Random();
    protected override void OnInitialized()
    {
        switch (Var1)
        {
            case 1: colors = new string[] { "red", "blue", "green", "yellow" }; break;
            case 2: colors = new string[] { "red", "blue", "yellow", "green" }; break;
            case 3: colors = new string[] { "red", "green", "blue", "yellow" }; break;
            case 4: colors = new string[] { "red", "green", "yellow", "blue" }; break;
            case 5: colors = new string[] { "red", "yellow", "blue", "green" }; break;
            case 6: colors = new string[] { "red", "yellow", "green", "blue" }; break;
            case 7: colors = new string[] { "blue", "red", "green", "yellow" }; break;
            case 8: colors = new string[] { "blue", "red", "yellow", "green" }; break;
            case 9: colors = new string[] { "blue", "green", "red", "yellow" }; break;
            case 10: colors = new string[] { "blue", "green", "yellow", "red" }; break;
            case 11: colors = new string[] { "blue", "yellow", "red", "green" }; break;
            case 12: colors = new string[] { "blue", "yellow", "green", "red" }; break;
            case 13: colors = new string[] { "green", "red", "blue", "yellow" }; break;
            case 14: colors = new string[] { "green", "red", "yellow", "blue" }; break;
            case 15: colors = new string[] { "green", "blue", "red", "yellow" }; break;
            case 16: colors = new string[] { "green", "blue", "yellow", "red" }; break;
            case 17: colors = new string[] { "green", "yellow", "red", "blue" }; break;
            case 18: colors = new string[] { "green", "yellow", "blue", "red" }; break;
            case 19: colors = new string[] { "yellow", "red", "blue", "green" }; break;
            case 20: colors = new string[] { "yellow", "red", "green", "blue" }; break;
            case 21: colors = new string[] { "yellow", "blue", "red", "green" }; break;
            case 22: colors = new string[] { "yellow", "blue", "green", "red" }; break;
            case 23: colors = new string[] { "yellow", "green", "red", "blue" }; break;
            case 24: colors = new string[] { "yellow", "green", "blue", "red" }; break;
        }
        switch (Var2)
        {
            case 1: shapes = new int[] { 0, 1, 3, 5 }; break;
            case 2: shapes = new int[] { 2, 4, 0, 3 }; break;
            case 3: shapes = new int[] { 1, 4, 5, 0 }; break;
            case 4: shapes = new int[] { 3, 1, 0, 4 }; break;
            case 5: shapes = new int[] { 2, 3, 4, 1 }; break;
            case 6: shapes = new int[] { 0, 5, 1, 4 }; break;
            case 7: shapes = new int[] { 4, 0, 3, 5 }; break;
            case 8: shapes = new int[] { 1, 0, 5, 2 }; break;
            case 9: shapes = new int[] { 2, 3, 1, 5 }; break;
            case 10: shapes = new int[] { 5, 0, 4, 3 }; break;
            case 11: shapes = new int[] { 3, 2, 4, 0 }; break;
            case 12: shapes = new int[] { 1, 3, 5, 2 }; break;
            case 13: shapes = new int[] { 4, 2, 5, 1 }; break;
            case 14: shapes = new int[] { 0, 3, 1, 5 }; break;
            case 15: shapes = new int[] { 2, 4, 1, 0 }; break;
            case 16: shapes = new int[] { 5, 1, 0, 3 }; break;
            case 17: shapes = new int[] { 3, 4, 2, 0 }; break;
            case 18: shapes = new int[] { 1, 5, 4, 3 }; break;
            case 19: shapes = new int[] { 0, 2, 4, 5 }; break;
            case 20: shapes = new int[] { 4, 3, 1, 0 }; break;
            case 21: shapes = new int[] { 2, 5, 3, 1 }; break;
            case 22: shapes = new int[] { 0, 5, 3, 4 }; break;
            case 23: shapes = new int[] { 1, 4, 0, 2 }; break;
            case 24: shapes = new int[] { 3, 5, 2, 4 }; break;
        }
        gamestate = 0;
        memorizetimer = 0;
        GameTimer();  // fire-and-forget
    }
    async void GameTimer()
    {
        while (await periodicTimer.WaitForNextTickAsync())
        {
            if (memorizetimer > 3 && memorizetimer <= 5)
            {
                gamestate = 1;
            }
            if (memorizetimer > 5 &&gamestate!=2 &&gamestate!=3&&gamestate!=4)
            {
                gamestate = 2;
            }
            await Task.Delay(1000);
            memorizetimer = memorizetimer + 1;
        }
    }
    
    public string GetStyles(int which, bool havecolor)
    {
        if (havecolor)
        {
            switch (which)
            {
                case 0: return (shapestyles[shapes[0]].ToString()) + colors[0] + ";";
                case 1: return (shapestyles[shapes[1]].ToString()) + colors[1] + ";";
                case 2: return (shapestyles[shapes[2]].ToString()) + colors[2] + ";";
                case 3: return (shapestyles[shapes[3]].ToString()) + colors[3] + ";";
            }
        }
        else
        {
            switch (which)
            {
                case 0: return (shapestyles[shapes[0]].ToString()) + " grey;";
                case 1: return (shapestyles[shapes[1]].ToString()) + " grey;";
                case 2: return (shapestyles[shapes[2]].ToString()) + " grey;";
                case 3: return (shapestyles[shapes[3]].ToString()) + " grey;";
            }
        }
        return "1";
    }
    public async Task CheckAnswer(int answer)
    {
        if (answer == Var4)
        {
            gamestate = 3;
            await Task.Delay(1000);
            mainDataModel.FinishedGame(true, playeriam, mainDataModel, lsm);
            //StateHasChanged();
        }
        else
        {
            gamestate = 4;
            await Task.Delay(1000);
            mainDataModel.FinishedGame(false, playeriam, mainDataModel, lsm);
        //StateHasChanged();
        }
    }
    public void Dispose()
    {
        periodicTimer.Dispose();
    }
}
