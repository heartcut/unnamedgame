@page "/ga2me/{amhost}/{lobbynumber}"
@inject NavigationManager navManager

<h3>GamePage</h3>
<cant-select-zone @onmousemove="MyMouseMoved" id="@MDM.MyCursorStyle">

    <PlayerCursors MDM="MDM"/>

    <game-window>
        <player1window>
        </player1window>
        <player2window>
        </player2window>
        <player3window>
        </player3window>
        <player4window>
        </player4window>
    </game-window>
    <div style="color: yellow; left: 50%; transform: translateX(-50%); bottom: 20px; position: fixed;font-size:larger;">I am code:@myid im in lobby @lobbynumber, the host is @hostid</div>

</cant-select-zone>

<div style="color: white; left: 50%; transform: translateX(-50%); position: fixed;">
    @amhost host lobby  @lobbynumber
</div>
<div style="color: white; left: 50%; transform: translateX(-50%); position: relative;">
    my id is @myid this is the data im getting @messagetext -----@dd[0]----just connected connections @connectio<button @onclick="@Connect">connect</button><button @onclick="@Send">send</button>
</div>

@code {
    [Parameter]
    public string amhost { get; set; }
    [Parameter]
    public string lobbynumber { get; set; }

    string incomingdata = "";
    string hostid = "";
    bool boolhost = false;
    //for the js
    [Inject]
    protected BrowserService Service { get; set; }


    MainDataModel MDM = new MainDataModel();

    private int[] PlayerCords = new int[8];
    //setsupdate speed in minutes
    PeriodicTimer periodicTimer = new(TimeSpan.FromMinutes(.008));

    [Inject] BlazorJSRuntime JS { get; set; }
    Peer? peer = null;
    DataConnection? dataConnection = null;

    //
    List<DataConnection> connections = new List<DataConnection>();
    //
    string id = "";
    string targetId = "";
    string msg = "i have accessed you host.";
    string log = "";
    string messagetext = "";
    string myid = GenerateRandomString(6);
    int connectio = 0;
    int[] dd = [2, 2];


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (amhost == "1")
        {
            boolhost = true;
            myid = lobbynumber;
        }
        else
        {
            boolhost = false;
            hostid = lobbynumber;

        }
        if (firstRender)
        {
            // Load the PeerJS Javascript library.
            // the library can be loaded in the index.html instead

            peer = new Peer(myid);
            // Set up event listener for when the peer is successfully opened
            peer.OnOpen += Peer_OnOpen;
            peer.OnConnection += Peer_OnConnection;


        }
    }
    private void Peer_OnOpen()
    {
        // Once the peer is open, we can proceed with the connection
        if (!boolhost)
        {
            Connect();
        }
    }
    //
    // player to host
    // theplayersid, reason for update, mousex, mousey,
    //
    //
    //
    //host to player
    // players player number, player1x, player1y, player2x, player2y, player3x, player3y, player4x, player4y
    //
    //
    //
    void Connect()
    {
        if (peer == null) return;
        DisposeDataConnection();
        InitDataConnection(peer.Connect(hostid));
    }

    void DataConnection_OnData(JSObject msg)
    {
        //Log(">> " + msg.JSRef!.As<string>());
        messagetext = msg.JSRef!.As<string>();
        dd = messagetext
            .Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
            .Select(messagetext => Convert.ToInt32(messagetext))
            .ToArray();
        connectio++;
        StateHasChanged();

    }


    void Send(string dd)
    {
        if (dataConnection == null) return;
        dataConnection.Send(dd);
        //Log($"<< {msg}");
    }

    void Send() => Send(myid + ",0");



    void DataConnection_OnOpen()
    {
        //Send($"Hello from {id}");
        Send(myid+",0");
    }

    void Peer_OnConnection(DataConnection conn)
    {
        //InitDataConnection(dataConnection);
        connections.Add(conn);
        conn.OnData += DataConnection_OnData; // Attach event to receive data
        
    }

    

    void InitDataConnection(DataConnection dataConnection)
    {
        if (this.dataConnection != null) return;
        this.dataConnection = dataConnection;
        dataConnection.OnOpen += DataConnection_OnOpen;
        dataConnection.OnClose += DataConnection_OnClose;
        dataConnection.OnData += DataConnection_OnData;
    }

    

   

    void DataConnection_OnClose()
    {
        DisposeDataConnection();
    }


    void DisposeDataConnection()
    {
        if (dataConnection != null)
        {
            dataConnection.OnOpen -= DataConnection_OnOpen;
            dataConnection.OnClose -= DataConnection_OnClose;
            dataConnection.OnData -= DataConnection_OnData;
            dataConnection.Dispose();
            dataConnection = null;
        }
    }


    public void Dispose()
    {
        periodicTimer?.Dispose();
        DisposeDataConnection();
        if (peer != null)
        {
            peer.OnConnection -= Peer_OnConnection;
            peer.Destroy();
            peer.Dispose();
            peer = null;
        }
    }
    public static string GenerateRandomString(int length)
    {
        const string chars = "0123456789";
        var random = new Random();
        var result = new char[length];

        for (int i = 0; i < length; i++)
        {
            result[i] = chars[random.Next(chars.Length)];
        }

        return new string(result);
    }


    async Task MyMouseMoved(MouseEventArgs e)
    {
        //js the four below
        //use browser service
        //add browser service to program.cs
        //and add script in index.html
        var dimension = await Service.GetDimensions();
        //we get browser dimensions and then set them
        MDM.BrowserHeight = dimension.Height;
        MDM.BrowserWidth = dimension.Width;
        //this sets curs to the coords around the center bascially
        MDM.mycursx = e.ClientX - (MDM.BrowserWidth / 2);
        MDM.mycursy = e.ClientY - (MDM.BrowserHeight / 2);
    }
    async void UpdateAllData()
    {
        Int32 unixTimestamp = (int)DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1)).TotalSeconds;

        
        if (MDM.MyPlayerNumber != 1)
        {
            MDM.P1Xcords = PlayerCords[0];
            MDM.P1Ycords = PlayerCords[1];
        }
        if (MDM.MyPlayerNumber != 2)
        {
            MDM.P2Xcords = PlayerCords[2];
            MDM.P2Ycords = PlayerCords[3];
        }
        if (MDM.MyPlayerNumber != 3)
        {
            MDM.P3Xcords = PlayerCords[4];
            MDM.P3Ycords = PlayerCords[5];
        }
        if (MDM.MyPlayerNumber != 4)
        {
            MDM.P4Xcords = PlayerCords[6];
            MDM.P4Ycords = PlayerCords[7];
        }

        
    }

    
    
}
