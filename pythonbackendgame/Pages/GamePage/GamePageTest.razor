@page "/game/{amhost}/{lobbynumber}"
@inject NavigationManager navManager

<h3 style="color: yellow; left: 50%; transform: translateX(-50%); top: 50px; position: fixed;font-size:larger;">
    Debug PANAL Lobby @lobbynumber Players in lobby @MDM.PlayersInLobby I am @localplayernumber
</h3>
<cant-select-zone @onmousemove="MyMouseMoved" id="@MDM.MyCursorStyle">

    <PlayerCursors MDM="MDM" />

    <game-window>
        <player1window style="@MDM.ponezone">
            <MakeSquare Var1="1" Var2="2" Var3="3" Var4="4"></MakeSquare>
        </player1window>
        <player2window style="@MDM.ponezone">
            <ActiveGameComponent ingame="-1" playergame="1" Var1="1" Var2="2" Var3="3" Var4="4"></ActiveGameComponent>
        </player2window>
        <player3window style="@MDM.ponezone">
            <ActiveGameComponent ingame = "1" playergame = "1" Var1="1" Var2="2" Var3="3" Var4="4"></ActiveGameComponent>
        </player3window> 
        <player4window style="@MDM.ponezone">
            <ActiveGameComponent ingame="0" playergame="1" Var1="1" Var2="2" Var3="3" Var4="4"></ActiveGameComponent>
        </player4window>
    </game-window>
    <div style="color: yellow; left: 50%; transform: translateX(-50%); bottom: 20px; position: fixed;font-size:larger;">I am code:@myid im in lobby @lobbynumber,
        my id is @myid ---myid @myid--hostid @hostId--i got leaches message <button>connect</button><button @onclick="@Send">send</button></div>

</cant-select-zone>

@code {
    static Random rndm = new Random();
    int first = rndm.Next(0, 32);
    int second = rndm.Next(0, 32);
    [Parameter]
    public string amhost { get; set; }
    [Parameter]
    public string lobbynumber { get; set; }

    bool boolhost = false;
    string myid = GenerateRandomString(6);
    string hostId = "";
    int localplayernumber = 7;

    [Inject]
    protected BrowserService Service { get; set; }

    MainDataModel MDM = new MainDataModel();

    //setsupdate speed in minutes
    PeriodicTimer periodicTimer = new(TimeSpan.FromMinutes(.004));

    [Inject] BlazorJSRuntime JS { get; set; }

    /////// <summary>
    /// /////////////////////////////////////////////////////////////////////////////////////////
    /// </summary>
    HostPeerConnectionManager? hostPeerManager;
    LeechPeerConnectionManager? leechPeerManager;

    int[] datafromleeches = [2, 2,2,2,2];


    protected override void OnInitialized()
    {
        RunTimer();  // fire-and-forget
    }
    async void RunTimer()
    {
        while (await periodicTimer.WaitForNextTickAsync())
        {
            if (boolhost)
            {
                localplayernumber = 1;
                HostSend();
            }
            else if (!boolhost)
            {
                if (localplayernumber == 7)
                {
                    InitSend();
                }
                Send();
            }
            
            StateHasChanged();
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            boolhost = amhost == "1";
            if (boolhost) { MDM.MyPlayerNumber = 1; MDM.PlayersInLobby = 0; }
            myid = boolhost ? lobbynumber : GenerateRandomString(6);
            hostId = lobbynumber;

            if (boolhost)
            {
                MDM.MyCursorStyle = "p" + 1;
                MDM.ptwozone = "pointer-events:none;"; MDM.pthreezone = "pointer-events:none;"; MDM.pfourzone = "pointer-events:none;";
                hostPeerManager = new HostPeerConnectionManager(myid,"",MDM,false);
                hostPeerManager.OnDataReceived += HostHandleDataReceived;
                StateHasChanged();
            }
            else
            { 
                leechPeerManager = new LeechPeerConnectionManager(myid, hostId, MDM);
                leechPeerManager.OnDataReceived +=LeechHandleDataReceived;
            }
        }
    }
    private void LeechHandleDataReceived(MainDataModel fromhost)
    {
        
        //this means it is a message for assignment
        if (fromhost.ReasonForUpdate == "init"&& fromhost.SpecifyPlayerID == myid)
        {
            localplayernumber = fromhost.SpecifyPlayerInit;
            MDM.MyCursorStyle = "p" + localplayernumber;
            //this is making other players zones un clickable
            switch (localplayernumber)
            {
                case 2: MDM.ponezone = "pointer-events:none;"; MDM.pthreezone = "pointer-events:none;"; MDM.pfourzone = "pointer-events:none;"; break;
                case 3: MDM.ptwozone = "pointer-events:none;"; MDM.ponezone = "pointer-events:none;"; MDM.pfourzone = "pointer-events:none;"; break;
                case 4: MDM.ptwozone = "pointer-events:none;"; MDM.pthreezone = "pointer-events:none;"; MDM.ponezone = "pointer-events:none;"; break;
            }
            
        }
        else if (fromhost.ReasonForUpdate == "regular")
        {
            MDM.P1Xcords = fromhost.P1Xcords;
            MDM.P1Ycords = fromhost.P1Ycords;
            if (localplayernumber != 2)
            {
                MDM.P2Xcords = fromhost.P2Xcords;
                MDM.P2Ycords = fromhost.P2Ycords;
            }
            else if (localplayernumber != 3)
            {
                MDM.P3Xcords = fromhost.P3Xcords;
                MDM.P3Ycords = fromhost.P3Ycords;
            }
            else if (localplayernumber != 4)
            {
                MDM.P4Xcords = fromhost.P4Xcords;
                MDM.P4Ycords = fromhost.P4Ycords;
            }
        }
        StateHasChanged();
    }
    private void HostHandleDataReceived(string data)
    {
        
        //add logic to asdsign player number here
        
        datafromleeches = data
        .Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
        .Select(messagetext => Convert.ToInt32(messagetext))
        .ToArray();
        //this means the connection wants to be assigned a player number
        if (datafromleeches[2] == 0)
        {
            MDM.PlayersInLobby++;
            MDM.SpecifyPlayerInit = MDM.PlayersInLobby+1;
            MDM.SpecifyPlayerID = datafromleeches[1].ToString();
            MDM.ReasonForUpdate = "init";
            InitHostSend();
            MDM.ReasonForUpdate = "regular";
        }
        if (datafromleeches[0] == 2)
        {
            MDM.P2Xcords = datafromleeches[3];
            MDM.P2Ycords = datafromleeches[4];
        }
        if (datafromleeches[0] == 3)
        {
            MDM.P3Xcords = datafromleeches[3];
            MDM.P3Ycords = datafromleeches[4];
        }
        if (datafromleeches[0] == 4)
        {
            MDM.P4Xcords = datafromleeches[3];
            MDM.P4Ycords = datafromleeches[4];
        }
        
        StateHasChanged();
    }
    //
    // leech to host (from leech)
    // the players lobby player number, theplayers peerid, reason for update0 for assignment 1 for update, mousex, mousey,
    //
    //
    
    void Send() => leechPeerManager?.SendData(localplayernumber +","+myid+",1,"+MDM.mycursx+","+MDM.mycursy);
    void InitSend() => leechPeerManager?.SendData("0," + myid + ",0," + MDM.mycursx + "," + MDM.mycursy);
    void HostSend() => hostPeerManager?.SendData(MDM);
    void InitHostSend() => hostPeerManager?.SendData(MDM);

    public void Dispose()
    {
        if (!boolhost)
        {
            leechPeerManager?.Dispose();
        }
        else if (boolhost)
        {
            hostPeerManager?.Dispose();
        }
        periodicTimer?.Dispose();
    }
    public static string GenerateRandomString(int length)
    {
        const string chars = "0123456789";
        var random = new Random();
        var result = new char[length];

        for (int i = 0; i < length; i++)
        {
            result[i] = chars[random.Next(chars.Length)];
        }

        return new string(result);
    }
    async Task MyMouseMoved(MouseEventArgs e)
    {
        //js the four below
        //use browser service
        //add browser service to program.cs
        //and add script in index.html
        var dimension = await Service.GetDimensions();
        //we get browser dimensions and then set them
        MDM.BrowserHeight = dimension.Height;
        MDM.BrowserWidth = dimension.Width;
        //this sets curs to the coords around the center bascially
        MDM.mycursx = e.ClientX - (MDM.BrowserWidth / 2);
        MDM.mycursy = e.ClientY - (MDM.BrowserHeight / 2);
        if (boolhost)
        {
            MDM.P1Xcords = MDM.mycursx;
            MDM.P1Ycords = MDM.mycursy;
        }
        
    }
   
//Int32 unixTimestamp = (int)DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1)).TotalSeconds;


}