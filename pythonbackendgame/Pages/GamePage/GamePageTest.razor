@page "/game/{amhost}/{lobbynumber}"
@inject NavigationManager navManager

<h3 style="color: yellow; left: 50%; transform: translateX(-50%); top: 50px; position: fixed;font-size:larger;">
    Debug PANEL Lobby @lobbynumber Players in lobby @MDM.PlayersInLobby I am @localplayernumber x= @LSM.PlayerXcords y= @LSM.PlayerYcords player1 vars: 1= @MDM.P1GameVar1 2=@MDM.P1GameVar2
</h3>
<cant-select-zone @onmousemove="MyMouseMoved" id="@MDM.MyCursorStyle">

    <PlayerCursors MDM="MDM" />

    <game-window>
        <player1window style="@MDM.ponezone">
            <ActiveGameComponent gamestate="MDM.P1State" playeriam="localplayernumber" @bind-mainDataModel="MDM" whichplayersgame="1" playergame="MDM.P1Game"></ActiveGameComponent>
            <PlayerHealthBar myhealth="1" playercolor="blue" />

        </player1window>
        <player2window style="@MDM.ptwozone">
            <ActiveGameComponent gamestate="MDM.P2State" playeriam="localplayernumber" @bind-mainDataModel="MDM" @bind-lsm="LSM" whichplayersgame="2" playergame="MDM.P2Game"></ActiveGameComponent>
            <PlayerHealthBar myhealth="2" playercolor="red" />

        </player2window>
        <player3window style="@MDM.pthreezone">
            <ActiveGameComponent gamestate="MDM.P3State" playeriam="localplayernumber" @bind-mainDataModel="MDM" @bind-lsm="LSM" whichplayersgame="3" playergame="MDM.P3Game"></ActiveGameComponent>
            <PlayerHealthBar myhealth="3" playercolor="green" />
        </player3window> 
        <player4window style="@MDM.pfourzone">
            <ActiveGameComponent gamestate="MDM.P4State" playeriam="localplayernumber" @bind-mainDataModel="MDM" @bind-lsm="LSM" whichplayersgame="4" playergame="MDM.P4Game"></ActiveGameComponent>
            <PlayerHealthBar myhealth="4" playercolor="yellow" />
        </player4window>
    </game-window>
    <div style="color: yellow; left: 50%; transform: translateX(-50%); bottom: 20px; position: fixed;font-size:larger;"><input value="@lobbyurl" style="width: 350px;"></div>

</cant-select-zone>

@code {
    static Random rndm = new Random();
    int first = rndm.Next(0, 32);
    int second = rndm.Next(0, 32);
    [Parameter]
    public string amhost { get; set; }
    [Parameter]
    public string lobbynumber { get; set; }

    bool boolhost = false;
    string myid = GenerateRandomString(6);
    string hostId = "";
    int localplayernumber = 7;
    [Inject]
    protected BrowserService Service { get; set; }

    MainDataModel MDM = new MainDataModel();
    LeechSendModel LSM = new LeechSendModel();

    //setsupdate speed in minutes
    PeriodicTimer periodicTimer = new(TimeSpan.FromMinutes(.004));

    [Inject] BlazorJSRuntime JS { get; set; }

    HostPeerConnectionManager? hostPeerManager;
    LeechPeerConnectionManager? leechPeerManager;

    private string lobbyurl;

    protected override void OnInitialized()
    {
        // Set the lobby URL dynamically based on the current environment
        //this way once the pipeline puts it on github pages the url is correct with.github/workflow
        string baseUrl = navManager.BaseUri.TrimEnd('/');
        lobbyurl = $"{baseUrl}/game/0/{lobbynumber}";

        boolhost = amhost == "1";
        if (boolhost) { MDM.MyPlayerNumber = 1; MDM.PlayersInLobby = 0; }
        myid = boolhost ? lobbynumber : GenerateRandomString(6);
        hostId = lobbynumber;
        
        if (boolhost)
        {
            MDM.MyCursorStyle = "p" + 1;
            MDM.ptwozone = "pointer-events:none;"; MDM.pthreezone = "pointer-events:none;"; MDM.pfourzone = "pointer-events:none;";
            hostPeerManager = new HostPeerConnectionManager(myid, "", MDM, false);
            hostPeerManager.OnDataReceived += HostHandleDataReceived;
        }
        else
        {
            leechPeerManager = new LeechPeerConnectionManager(myid, hostId, LSM);
            leechPeerManager.OnDataReceived += LeechHandleDataReceived;
        }
        RunTimer();  // fire-and-forget
    }
    async void RunTimer()
    {
        while (await periodicTimer.WaitForNextTickAsync())
        {
            if (boolhost)
            {
                localplayernumber = 1;
                HostSend();
            }
            else if (!boolhost)
            {
                if (localplayernumber == 7)
                {
                    LSM.PlayerPeerId = myid.ToString();
                    LSM.ReasonForUpdate = "init";
                    InitSend();
                    LSM.ReasonForUpdate = "regular";
                }
                Send();
            }

            StateHasChanged();
        }
    }

    void Send() => leechPeerManager?.SendData(LSM);
    void InitSend() => leechPeerManager?.SendData(LSM);

    void HostSend() => hostPeerManager?.SendData(MDM);
    void InitHostSend() => hostPeerManager?.SendData(MDM);

    new int[] temp = new int[5];
    
    private void LeechHandleDataReceived(MainDataModel fromhost)
    {
        //this means it is a message for assignment
        if (fromhost.ReasonForUpdate == "init"&& fromhost.SpecifyPlayerID == myid)
        {
            LSM.ReasonForUpdate = "regular";
            LSM.PlayerLobbyNumber = fromhost.SpecifyPlayerInit;

            localplayernumber = fromhost.SpecifyPlayerInit;
            MDM.MyCursorStyle = "p" + localplayernumber;
            //this is making other players zones un clickable
            switch (localplayernumber)
            {
                case 2: MDM.ponezone = "pointer-events:none;"; MDM.pthreezone = "pointer-events:none;"; MDM.pfourzone = "pointer-events:none;"; break;
                case 3: MDM.ptwozone = "pointer-events:none;"; MDM.ponezone = "pointer-events:none;"; MDM.pfourzone = "pointer-events:none;"; break;
                case 4: MDM.ptwozone = "pointer-events:none;"; MDM.pthreezone = "pointer-events:none;"; MDM.ponezone = "pointer-events:none;"; break;
            }
            if (localplayernumber == 1)
            {
                temp = MinigameGeneration.InitialHostGeneration();
                MDM.P1Game = temp[4];
                MDM.P1GameVar1 = temp[0];
                MDM.P1GameVar2 = temp[1];
                MDM.P1GameVar3 = temp[2];
                MDM.P1GameVar4 = temp[3];
                MDM.P1State = 1;
            }
            if(localplayernumber==2)
            {
                temp = MinigameGeneration.InitialHostGeneration();
                LSM.PlayerGame = temp[4];
                LSM.GameVar1 = temp[0];
                LSM.GameVar2 = temp[1];
                LSM.GameVar3 = temp[2];
                LSM.GameVar4 = temp[3];
                LSM.MyState = 1;
                MDM.P2State = 1;
            }
            else if(localplayernumber==3)
            {
                temp = MinigameGeneration.InitialHostGeneration();
                LSM.PlayerGame = temp[4];
                LSM.GameVar1 = temp[0];
                LSM.GameVar2 = temp[1];
                LSM.GameVar3 = temp[2];
                LSM.GameVar4 = temp[3];
                LSM.MyState = 1;
                MDM.P3State = 1;
            }
            else if (localplayernumber == 4)
            {
                temp = MinigameGeneration.InitialHostGeneration();
                LSM.PlayerGame = temp[4];
                LSM.GameVar1 = temp[0];
                LSM.GameVar2 = temp[1];
                LSM.GameVar3 = temp[2];
                LSM.GameVar4 = temp[3];
                LSM.MyState = 1;
                MDM.P4State = 1;
            }
        }
        else if (fromhost.ReasonForUpdate == "regular")
        {
            MDM.P1Xcords = fromhost.P1Xcords;
            MDM.P1Ycords = fromhost.P1Ycords;
            MDM.P1GameVar1 = fromhost.P1GameVar1;
            MDM.P1GameVar2 = fromhost.P1GameVar2;
            MDM.P1GameVar3 = fromhost.P1GameVar3;
            MDM.P1GameVar4 = fromhost.P1GameVar4;
            MDM.P1Game = fromhost.P1Game;
            MDM.P1State = fromhost.P1State;
            if (localplayernumber != 2)
            {
                MDM.P2Xcords = fromhost.P2Xcords;
                MDM.P2Ycords = fromhost.P2Ycords;
                MDM.P2Game = fromhost.P2Game;
                MDM.P2GameVar1 = fromhost.P2GameVar1;
                MDM.P2GameVar2 = fromhost.P2GameVar2;
                MDM.P2GameVar3 = fromhost.P2GameVar3;
                MDM.P2GameVar4 = fromhost.P2GameVar4;
                MDM.P2State = fromhost.P2State;
            }
            else if (localplayernumber != 3)
            {
                MDM.P3Xcords = fromhost.P3Xcords;
                MDM.P3Ycords = fromhost.P3Ycords;
                MDM.P3Game = fromhost.P3Game;
                MDM.P3GameVar1 = fromhost.P3GameVar1;
                MDM.P3GameVar2 = fromhost.P3GameVar2;
                MDM.P3GameVar3 = fromhost.P3GameVar3;
                MDM.P3GameVar4 = fromhost.P3GameVar4;
                MDM.P3State = fromhost.P3State;
            }
            else if (localplayernumber != 4)
            {
                MDM.P4Xcords = fromhost.P4Xcords;
                MDM.P4Ycords = fromhost.P4Ycords;
                MDM.P4Game = fromhost.P4Game;
                MDM.P4GameVar1 = fromhost.P4GameVar1;
                MDM.P4GameVar2 = fromhost.P4GameVar2;
                MDM.P4GameVar3 = fromhost.P4GameVar3;
                MDM.P4GameVar4 = fromhost.P4GameVar4;
                MDM.P4State = fromhost.P4State;
            }
        }
        //StateHasChanged();
    }
    private void HostHandleDataReceived(LeechSendModel lsm)
    {
        //add logic to asdsign player number here
        //this means the connection wants to be assigned a player number
        if (lsm.ReasonForUpdate=="init")
        {
            MDM.PlayersInLobby++;
            MDM.SpecifyPlayerInit = MDM.PlayersInLobby+1;
            MDM.SpecifyPlayerID = lsm.PlayerPeerId;
            MDM.ReasonForUpdate = "init";
            InitHostSend();
            MDM.ReasonForUpdate = "regular";
        }
        if (lsm.ReasonForUpdate == "regular")
        {
            switch (lsm.PlayerLobbyNumber)
            {
                case 2:
                    MDM.P2Xcords = lsm.PlayerXcords;
                    MDM.P2Ycords = lsm.PlayerYcords;
                    MDM.P2GameVar1 = lsm.GameVar1;
                    MDM.P2GameVar2 = lsm.GameVar2;
                    MDM.P2GameVar3 = lsm.GameVar3;
                    MDM.P2GameVar4 = lsm.GameVar4;
                    MDM.P2Game = lsm.PlayerGame;
                    MDM.P2State = lsm.MyState;
                    break;
                case 3:
                    MDM.P3Xcords = lsm.PlayerXcords;
                    MDM.P3Ycords = lsm.PlayerYcords;
                    MDM.P3GameVar1 = lsm.GameVar1;
                    MDM.P3GameVar2 = lsm.GameVar2;
                    MDM.P3GameVar3 = lsm.GameVar3;
                    MDM.P3GameVar4 = lsm.GameVar4;
                    MDM.P3Game = lsm.PlayerGame;
                    MDM.P3State = lsm.MyState;
                    break;
                case 4:
                    MDM.P4Xcords = lsm.PlayerXcords;
                    MDM.P4Ycords = lsm.PlayerYcords;
                    MDM.P4GameVar1 = lsm.GameVar1;
                    MDM.P4GameVar2 = lsm.GameVar2;
                    MDM.P4GameVar3 = lsm.GameVar3;
                    MDM.P4GameVar4 = lsm.GameVar4;
                    MDM.P4Game = lsm.PlayerGame;
                    MDM.P4State = lsm.MyState;
                    break;
            }
        }
        //StateHasChanged();
    }
    
    public void Dispose()
    {
        if (!boolhost)
        {
            leechPeerManager?.Dispose();
        }
        else if (boolhost)
        {
            hostPeerManager?.Dispose();
        }
        periodicTimer?.Dispose();
    }
    public static string GenerateRandomString(int length)
    {
        const string chars = "0123456789";
        var random = new Random();
        var result = new char[length];

        for (int i = 0; i < length; i++)
        {
            result[i] = chars[random.Next(chars.Length)];
        }
        return new string(result);
    }
    async Task MyMouseMoved(MouseEventArgs e)
    {
        //js the four below
        //use browser service
        //add browser service to program.cs
        //and add script in index.html
        var dimension = await Service.GetDimensions();
        //we get browser dimensions and then set them
        MDM.BrowserHeight = dimension.Height;
        MDM.BrowserWidth = dimension.Width;
        //this sets curs to the coords around the center bascially
        MDM.mycursx = e.ClientX - (MDM.BrowserWidth / 2);
        MDM.mycursy = e.ClientY - (MDM.BrowserHeight / 2);

        LSM.PlayerXcords = MDM.mycursx;
        LSM.PlayerYcords = MDM.mycursy;
        if (boolhost)
        {
            MDM.P1Xcords = MDM.mycursx;
            MDM.P1Ycords = MDM.mycursy;
        }
    }
//Int32 unixTimestamp = (int)DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1)).TotalSeconds;
}