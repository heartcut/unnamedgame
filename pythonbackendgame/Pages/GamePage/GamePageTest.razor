@page "/"
@inject DataModel DM
@inject SoundService SoundService

<div @onclick="PlayClick">
    @if (play)
    {
        <audio autoplay loop><source src="Assets/click.wav" type="audio/wav" /></audio>
    }
    else
    {
        <audio autoplay muted><source src="Assets/click.wav" type="audio/wav" /></audio>
    }

</div>
@if(DM.sitestate==0)
{
    <button @onclick="SetState">start</button>
}
else if (DM.sitestate == 1)
{
    <h1 style="text-align:center; color:white;">Welcome to unnamed game!</h1>
    <h2 style="text-align:center">Join or Create a lobby</h2>
    <lobby-window>
        lobbynum : @lobbynumber
        <div>Host Lobby <div><button @onclick=@HostLobby> Go</button></div></div>
        <div>Join Lobby <div><input placeholder="lobby id here" style="width: 350px;" @bind=@lobbynumber></input><div><button @onclick=@GoToLobby> Go</button></div></div></div>

    </lobby-window>

}
else if (DM.sitestate == 2)
{
    <h3 style="color: yellow; left: 50%; transform: translateX(-50%); top: 50px; position: fixed;font-size:larger;">
        Debug PANEL Lobby @lobbynumber Players in lobby @MDM.PlayersInLobby I am @localplayernumber id=@myid teamgamenumber=@MDM.currentteamgamenumber
    </h3>
    @if (MDM.gamestate == 0)
    {
        <div style="color:red;">Waiting for host to start</div>
    }
    @if (MDM.gamestate == 1)
    {
        <div style="color:green;">> Game Started</div>

    }
    @if (MDM.gamestate == 2)
    {
        <div style="color:green;">> GAMESTATE2</div>
    }
    <cant-select-zone @onmousemove="MyMouseMoved" id="@MDM.MyCursorStyle">

        <PlayerCursors MDM="MDM" />
        @if (MDM.gamestate == 0 | MDM.gamestate == 1)
        {
            <game-window>
                <player1window style="@MDM.ponezone">
                    <ActiveGameComponent gamestate="MDM.P1State" playeriam="localplayernumber" @bind-mainDataModel="MDM" whichplayersgame="1" playergame="MDM.P1Game"></ActiveGameComponent>
                    <PlayerHealthBar myhealth="MDM.P1Health" playercolor="blue" />

                </player1window>
                <player2window style="@MDM.ptwozone">
                    <ActiveGameComponent gamestate="MDM.P2State" playeriam="localplayernumber" @bind-mainDataModel="MDM" @bind-lsm="LSM" whichplayersgame="2" playergame="MDM.P2Game"></ActiveGameComponent>
                    <PlayerHealthBar myhealth="MDM.P2Health" playercolor="red" />

                </player2window>
                <player3window style="@MDM.pthreezone">
                    <ActiveGameComponent gamestate="MDM.P3State" playeriam="localplayernumber" @bind-mainDataModel="MDM" @bind-lsm="LSM" whichplayersgame="3" playergame="MDM.P3Game"></ActiveGameComponent>
                    <PlayerHealthBar myhealth="MDM.P3Health" playercolor="green" />
                </player3window>
                <player4window style="@MDM.pfourzone">
                    <ActiveGameComponent gamestate="MDM.P4State" playeriam="localplayernumber" @bind-mainDataModel="MDM" @bind-lsm="LSM" whichplayersgame="4" playergame="MDM.P4Game"></ActiveGameComponent>
                    <PlayerHealthBar myhealth="MDM.P4Health" playercolor="yellow" />
                </player4window>
            </game-window>
        }
        @if (MDM.gamestate==2)
        {
            <game-window>
                <ActiveTeamGameComponent @bind-mainDataModel="MDM" @bind-lsm="LSM" playeriam="localplayernumber"></ActiveTeamGameComponent>


            </game-window>
        }

        @if (boolhost)
        {
            <button @onclick=@StartGame style="left: 50%; transform: translateX(-50%); bottom: 40px; position: fixed;font-size:larger;">Start game as host</button>

            @* <button @onclick=@StartGameTest style="left: 50%; transform: translateX(-30%); bottom: 40px; position: fixed;font-size:larger;">cheat health</button> *@

        }
        <div style="color: yellow; left: 50%; transform: translateX(-50%); bottom: 20px; position: fixed;font-size:larger;"><input value="@lobbynumber" style="width: 350px;"></div>

    </cant-select-zone>
}
@code {
    bool play = false;
    public async Task PlayClick()
    {
        play = false;
        play = true;
        await Task.Delay(200);
        play = false;
        StateHasChanged();
    }
    public string lobbynumber { get; set; }
    [Inject]
    protected BrowserService Service { get; set; }
    [Inject] BlazorJSRuntime JS { get; set; }

    MainDataModel MDM = new MainDataModel();
    LeechSendModel LSM = new LeechSendModel();

    HostPeerConnectionManager? hostPeerManager;
    LeechPeerConnectionManager? leechPeerManager;

    PeriodicTimer periodicTimer = new(TimeSpan.FromMinutes(.004));

    bool boolhost = false;
    string myid = GenerateRandomString(6);
    string hostId = "";
    int localplayernumber = 7;
    private string lobbyurl;

    int STARTINGHEALTH = 8;

    //setsupdate speed in minutes

    protected override void OnInitialized()
    {
        SoundService.OnPlaySound += PlayClick;
    }
    void GoToLobby()
    {
        Console.WriteLine("got 1");
        StateHasChanged();
        hostId = lobbynumber;
        myid =  GenerateRandomString(6);
        MDM.gamestate = 0;
        leechPeerManager = new LeechPeerConnectionManager(myid, hostId, LSM);
        leechPeerManager.OnDataReceived += LeechHandleDataReceived;
        Console.WriteLine("got 2"+hostId+"/"+myid);
        RunTimer();  // fire-and-forget

    }
    void HostLobby()
    {
        boolhost = true;
        myid = GenerateRandomString(6);
        hostId = myid;
        lobbynumber = hostId;
        MDM.gamestate = 0;
        MDM.MyPlayerNumber = 1;
        MDM.PlayersInLobby = 1;
        MDM.P1Health = STARTINGHEALTH;
        MDM.MyCursorStyle = "p" + 1;
        MDM.ptwozone = "pointer-events:none;"; MDM.pthreezone = "pointer-events:none;"; MDM.pfourzone = "pointer-events:none;";
        hostPeerManager = new HostPeerConnectionManager(myid, "", MDM, false);
        hostPeerManager.OnDataReceived += HostHandleDataReceived;
        RunTimer();  // fire-and-forget
    }
    void SetState()
    {
        DM.sitestate = 1;
    }
    async void RunTimer()
    {
        DM.sitestate = 2;

        while (await periodicTimer.WaitForNextTickAsync())
        {
            if (boolhost)
            {
                localplayernumber = 1;
                HostSend();
                gamestatecheck();
            }
            else if (!boolhost)
            {
                if (localplayernumber == 7)
                {
                    LSM.PlayerPeerId = myid.ToString();
                    LSM.ReasonForUpdate = "init";
                    InitSend();
                    LSM.ReasonForUpdate = "regular";
                    await Task.Delay(100);
                    //short term fix for doubling up on lobby need to add validation
                }
                Send();
            }
            StateHasChanged();
        }
    }

    void Send() => leechPeerManager?.SendData(LSM);
    void InitSend() => leechPeerManager?.SendData(LSM);

    void HostSend() => hostPeerManager?.SendData(MDM);
    void InitHostSend() => hostPeerManager?.SendData(MDM);

    void gamestatecheck()
    {
        if (MDM.gamestate == 1)
        {
            switch (MDM.PlayersInLobby)
            {
                case 2: if (MDM.P1Health >= 12 && MDM.P2Health >= 12) { StartTeamGame(); } break;
                case 3: if (MDM.P1Health >= 12 && MDM.P2Health >= 12 && MDM.P3Health >= 12) { StartTeamGame(); } break;
                case 4: if (MDM.P1Health >= 12 && MDM.P2Health >= 12 && MDM.P3Health >= 12 && MDM.P4Health >= 12) { StartTeamGame(); } break;
            }
        }
        if(MDM.gamestate==2)
        {
            MDM.UpdateCircles(LSM.CirclesIClicked,MDM);
            if (LSM.CirclesIClicked.Contains(12)) { FinishTeamGame(); }
            if (LSM.lastnumbericlicked > MDM.currentteamgamenumber) { MDM.currentteamgamenumber = LSM.lastnumbericlicked; }
            switch (MDM.PlayersInLobby)
            {
                case 2:
                    MDM.UpdateCircles(MDM.Circlesp2clicked, MDM);
                    if (MDM.Circlesp2clicked.Contains(12)) { FinishTeamGame(); }
                    break;
                case 3:
                    MDM.UpdateCircles(MDM.Circlesp2clicked, MDM);
                    MDM.UpdateCircles(MDM.Circlesp3clicked, MDM);
                    if (MDM.Circlesp2clicked.Contains(12)) { FinishTeamGame(); }
                    if (MDM.Circlesp3clicked.Contains(12)) { FinishTeamGame(); }
                    break;
                case 4:
                    MDM.UpdateCircles(MDM.Circlesp2clicked, MDM);
                    MDM.UpdateCircles(MDM.Circlesp3clicked, MDM);
                    MDM.UpdateCircles(MDM.Circlesp4clicked, MDM);
                    if (MDM.Circlesp2clicked.Contains(12)) { FinishTeamGame(); }
                    if (MDM.Circlesp3clicked.Contains(12)) { FinishTeamGame(); }
                    if (MDM.Circlesp4clicked.Contains(12)) { FinishTeamGame(); }
                    break;
            }
        }
    }
    void StartGame()
    {
        MDM.gamestate = 1;
        gamestatecheck();
    }
    void StartGameTest()
    {
        MDM.P1Health = 12;
        MDM.P2Health = 12;
        MDM.P3Health = 12;
        MDM.P4Health = 12;

        gamestatecheck();
    }
    void StartTeamGame()
    {
        MDM.Circles = MinigameGeneration.GenerateCircles();
        MDM.gamestate = 2;
    }
    void FinishTeamGame()
    {
        MDM.P1Health = STARTINGHEALTH;
        MDM.P2Health = STARTINGHEALTH;
        MDM.P3Health = STARTINGHEALTH;
        MDM.P4Health = STARTINGHEALTH;
        MDM.P1State = 0;
        MDM.P2State = 0;
        MDM.P3State = 0;
        MDM.P4State = 0;

        MDM.gamestate = 1;
        Console.WriteLine("you finished game");
    }
    private void LeechHandleDataReceived(MainDataModel fromhost)
    {
        //this means it is a message for assignment
        if (fromhost.ReasonForUpdate == "init"&& fromhost.SpecifyPlayerID == myid)
        {
            LSM.ReasonForUpdate = "regular";
            LSM.PlayerLobbyNumber = fromhost.SpecifyPlayerInit;
            localplayernumber = fromhost.SpecifyPlayerInit;
            MDM.MyCursorStyle = "p" + localplayernumber;
            //this is making other players zones un clickable
            switch (localplayernumber)
            {
                case 2: MDM.ponezone = "pointer-events:none;"; MDM.pthreezone = "pointer-events:none;"; MDM.pfourzone = "pointer-events:none;"; MDM.P2Health = STARTINGHEALTH; break;
                case 3: MDM.ptwozone = "pointer-events:none;"; MDM.ponezone = "pointer-events:none;"; MDM.pfourzone = "pointer-events:none;"; MDM.P3Health = STARTINGHEALTH; break;
                case 4: MDM.ptwozone = "pointer-events:none;"; MDM.pthreezone = "pointer-events:none;"; MDM.ponezone = "pointer-events:none;"; MDM.P4Health = STARTINGHEALTH; break;
            }

            int[] temp = MinigameGeneration.InitialHostGeneration();
            LSM.PlayerGame = temp[4];
            LSM.GameVar1 = temp[0];
            LSM.GameVar2 = temp[1];
            LSM.GameVar3 = temp[2];
            LSM.GameVar4 = temp[3];
            LSM.MyState = 1;
            LSM.MyHealth = STARTINGHEALTH;
        }
        else if (fromhost.ReasonForUpdate == "regular")
        {
            MDM.RegularUpdateFromHost(fromhost,MDM,localplayernumber);
        }
        //StateHasChanged();
    }
    private void HostHandleDataReceived(LeechSendModel lsm)
    {
        //add logic to asdsign player number here
        //this means the connection wants to be assigned a player number
        if (lsm.ReasonForUpdate=="init")
        {
            MDM.PlayersInLobby++;
            MDM.SpecifyPlayerInit = MDM.PlayersInLobby;
            MDM.SpecifyPlayerID = lsm.PlayerPeerId;
            MDM.ReasonForUpdate = "init";
            InitHostSend();
            MDM.ReasonForUpdate = "regular";
        }
        if (lsm.ReasonForUpdate == "regular")
        {
            MDM.RegularUpdateFromLeech(lsm, MDM);
        }
        
        //StateHasChanged();
    }
   
    public void Dispose()
    {
        if (!boolhost)
        {
            leechPeerManager?.Dispose();
        }
        else if (boolhost)
        {
            hostPeerManager?.Dispose();
        }
        periodicTimer?.Dispose();
    }
    public static string GenerateRandomString(int length)
    {
        const string chars = "0123456789";
        var random = new Random();
        var result = new char[length];

        for (int i = 0; i < length; i++)
        {
            result[i] = chars[random.Next(chars.Length)];
        }
        return new string(result);
    }
    async Task MyMouseMoved(MouseEventArgs e)
    {
        //js the four below
        //use browser service
        //add browser service to program.cs
        //and add script in index.html
        var dimension = await Service.GetDimensions();
        //we get browser dimensions and then set them
        MDM.BrowserHeight = dimension.Height;
        MDM.BrowserWidth = dimension.Width;
        //this sets curs to the coords around the center bascially
        MDM.mycursx = e.ClientX - (MDM.BrowserWidth / 2);
        MDM.mycursy = e.ClientY - (MDM.BrowserHeight / 2);

        LSM.PlayerXcords = MDM.mycursx;
        LSM.PlayerYcords = MDM.mycursy;
        if (boolhost)
        {
            MDM.P1Xcords = MDM.mycursx;
            MDM.P1Ycords = MDM.mycursy;
        }
    }
//Int32 unixTimestamp = (int)DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1)).TotalSeconds;
}